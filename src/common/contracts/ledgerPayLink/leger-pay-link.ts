/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LedgerPayLinkInterface extends utils.Interface {
  functions: {
    "LPLAddress()": FunctionFragment;
    "feePer1000()": FunctionFragment;
    "payWithETH(uint256,address,string)": FunctionFragment;
    "payWithToken(address,uint256,address,string)": FunctionFragment;
  };

  getFunction(
      nameOrSignatureOrTopic:
          | "LPLAddress"
          | "feePer1000"
          | "payWithETH"
          | "payWithToken"
  ): FunctionFragment;

  encodeFunctionData(
      functionFragment: "LPLAddress",
      values?: undefined
  ): string;
  encodeFunctionData(
      functionFragment: "feePer1000",
      values?: undefined
  ): string;
  encodeFunctionData(
      functionFragment: "payWithETH",
      values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
  ): string;
  encodeFunctionData(
      functionFragment: "payWithToken",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
  ): string;

  decodeFunctionResult(functionFragment: "LPLAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePer1000", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payWithETH", data: BytesLike): Result;
  decodeFunctionResult(
      functionFragment: "payWithToken",
      data: BytesLike
  ): Result;

  events: {
    "LPL_PaidWithETH(string,uint256,address)": EventFragment;
    "LPL_PaidWithToken(string,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LPL_PaidWithETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPL_PaidWithToken"): EventFragment;
}

export interface LPL_PaidWithETHEventObject {
  paymentId: string;
  ETHAmount: BigNumber;
  destination: string;
}
export type LPL_PaidWithETHEvent = TypedEvent<
    [string, BigNumber, string],
    LPL_PaidWithETHEventObject
>;

export type LPL_PaidWithETHEventFilter = TypedEventFilter<LPL_PaidWithETHEvent>;

export interface LPL_PaidWithTokenEventObject {
  paymentId: string;
  tokenAddress: string;
  tokenAmount: BigNumber;
  destination: string;
}
export type LPL_PaidWithTokenEvent = TypedEvent<
    [string, string, BigNumber, string],
    LPL_PaidWithTokenEventObject
>;

export type LPL_PaidWithTokenEventFilter =
    TypedEventFilter<LPL_PaidWithTokenEvent>;

export interface LedgerPayLink extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LedgerPayLinkInterface;

  queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LPLAddress(overrides?: CallOverrides): Promise<[string]>;

    feePer1000(overrides?: CallOverrides): Promise<[BigNumber]>;

    payWithETH(
        amount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payWithToken(
        tokenAddress: PromiseOrValue<string>,
        tokenAmount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LPLAddress(overrides?: CallOverrides): Promise<string>;

  feePer1000(overrides?: CallOverrides): Promise<BigNumber>;

  payWithETH(
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      paymentId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payWithToken(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      paymentId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LPLAddress(overrides?: CallOverrides): Promise<string>;

    feePer1000(overrides?: CallOverrides): Promise<BigNumber>;

    payWithETH(
        amount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<void>;

    payWithToken(
        tokenAddress: PromiseOrValue<string>,
        tokenAmount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LPL_PaidWithETH(string,uint256,address)"(
        paymentId?: PromiseOrValue<string> | null,
        ETHAmount?: null,
        destination?: null
    ): LPL_PaidWithETHEventFilter;
    LPL_PaidWithETH(
        paymentId?: PromiseOrValue<string> | null,
        ETHAmount?: null,
        destination?: null
    ): LPL_PaidWithETHEventFilter;

    "LPL_PaidWithToken(string,address,uint256,address)"(
        paymentId?: PromiseOrValue<string> | null,
        tokenAddress?: null,
        tokenAmount?: null,
        destination?: null
    ): LPL_PaidWithTokenEventFilter;
    LPL_PaidWithToken(
        paymentId?: PromiseOrValue<string> | null,
        tokenAddress?: null,
        tokenAmount?: null,
        destination?: null
    ): LPL_PaidWithTokenEventFilter;
  };

  estimateGas: {
    LPLAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feePer1000(overrides?: CallOverrides): Promise<BigNumber>;

    payWithETH(
        amount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payWithToken(
        tokenAddress: PromiseOrValue<string>,
        tokenAmount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LPLAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePer1000(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payWithETH(
        amount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payWithToken(
        tokenAddress: PromiseOrValue<string>,
        tokenAmount: PromiseOrValue<BigNumberish>,
        destination: PromiseOrValue<string>,
        paymentId: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
